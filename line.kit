import kit.math;
include "string.h";
include "time.h";
include "stdlib.h";
include "stdio.h";
include "math.h";

import helperfunctions;
import point;
import rect;
import circle;
import line;


function lineIntersection(line1: Line, line2: Line): Bool {
    var px: Float = line1.p2.x - line1.p1.x;
    var py: Float = line1.p2.y - line1.p1.y;
    var qx: Float = line2.p2.x - line2.p1.x;
    var qy: Float = line2.p2.y - line2.p1.y;

    var s: Float;
    var t: Float;
    s = (-py * (line1.p1.x - line2.p1.x) + px * (line1.p1.y - line2.p1.y)) / (-qx * py + px * qy);
    t = ( qx * (line1.p1.y - line2.p1.y) - qy * (line1.p1.x - line2.p1.x)) / (-qx * py + px * qy);

    return (s >= 0 && s <= 1 && t >= 0 && t <= 1);
}


function distPointToLine(line: Line, p: Point): Float {
    var dx: Float = line.p2.x - line.p1.x;
    var dy: Float = line.p2.y - line.p1.y;
    if ((dx == 0) && (dy == 0)) {
        // It's a point not a line segment.
        dx = p.x - line.p1.x;
        dy = p.y - line.p1.y;
        return sqrtf(dx * dx + dy * dy);
    }
    // Calculate the t that minimizes the distance.
    var t: Float = ((p.x - line.p1.x) * dx + (p.y - line.p1.y) * dy) / (dx * dx + dy * dy);

    // See if this represents one of the segment's end points or a point in the middle.
    if (t < 0) {
        dx = p.x - line.p1.x;
        dy = p.y - line.p1.y;
    } else if (t > 1) {
        dx = p.x - line.p2.x;
        dy = p.y - line.p2.y;
    } else {
        var closest: Point = Point.new(line.p1.x + t * dx, line.p1.y + t * dy);
        dx = p.x - closest.x;
        dy = p.y - closest.y;
    }

    return sqrtf(dx * dx + dy * dy);
}


struct Line {
    var p1: Point;
    var p2: Point;
    var center: Point;
    var length: Float;

    static function new(x1: Float, y1: Float, x2: Float, y2: Float): Line {
        var p1: Point = Point.new(x1, y1);
        var p2: Point = Point.new(x2, y2);
        return struct Self {
            p1: p1,
            p2: p2,
            center: Point.new((x1 + x2) / 2, (y1 + y2) / 2),
            length: p1.dist(p2)
        };
    }

    static function newFromPoints(p1: Point, p2: Point): Line {
        return struct Self {
            p1: p1,
            p2: p2,
            center: Point.new((p1.x + p2.x) / 2, (p1.y + p2.y) / 2),
            length: p1.dist(p2)
        };
    }

    static function newFromCenterDistAngle(p1: Point, p2: Point): Line {
        return struct Self {
            p1: p1,
            p2: p2,
            center: Point.new((p1.x + p2.x) / 2, (p1.y + p2.y) / 2),
            length: p1.dist(p2)
        };
    }

    public function base(): Ptr[Void]{
        return &this;
    }
}
