/*
Inspired by Daniel Shiffman
http://codingtra.in
https://www.youtube.com/watch?v=z0YFFg_nBjw
https://github.com/CodingTrain/QuadTree
*/


import kit.math;
include "string.h";
include "time.h";
include "stdlib.h";
// var count: Int = 0;


function absF(n: Float) {
    if n < 0 {
        return n * -1;
    } else {
        return n;
    }
}


function strAdd(one: CString, two: CString) {
    var out = malloc(one.length + two.length);
    strcpy(out, one);
    strcat(out, two);
    return out;
}


function randF(lower: Float, upper: Float) {
    // printf("%lu", clock());
    srand48(clock());
    return lower + drand48() * (upper - lower);
}


struct Point {
    var x: Float;
    var y: Float;
    var initialized: Bool = false;

    static function new(x: Float, y: Float) {
        return struct Self {
            x,
            y,
            initialized: true
        };
    }

    function dist(other: Point) {
        return sqrt((this.x - other.x) * (this.x - other.x)
                    +
                    (this.y - other.y) * (this.y - other.y)
                    );
    }

    function print(printUnInit: Bool = true, append: CString = "") {
        if this.initialized {
            printf("(%f, %f)", this.x, this.y);
            printf("%s", append);
        } else {
            if printUnInit {
                printf("(-.---, -.---)");
                printf("%s", append);
            }
        }
    }
}


struct Rect {
    var x: Float;
    var y: Float;
    var w: Float;
    var h: Float;

    var tl: Point;
    var tr: Point;
    var bl: Point;
    var br: Point;

    static function new(x: Float, y: Float, w: Float, h: Float): Rect {
        return struct Self {
            x,
            y,
            w,
            h,
            tl: Point.new(x,     y    ),
            tr: Point.new(x + w, y    ),
            bl: Point.new(x,     y + h),
            br: Point.new(x + w, y + h)
        };
    }

    function dist(other: Rect): Float {
        var dist_tl = this.tl.dist(other.tl);
        var dist_tr = this.tr.dist(other.tr);
        var dist_bl = this.bl.dist(other.bl);
        var dist_br = this.br.dist(other.br);
        return (dist_tl + dist_tr + dist_bl + dist_br) / 4;
    }

    function contains(pt: Point): Bool {
        return (pt.x >= this.x - this.w &&
                pt.x <= this.x + this.w &&
                pt.y >= this.y - this.h &&
                pt.y <= this.y + this.h);
    }

    function intersects(other: Rect): Bool {
        return !(other.x - other.w > this.x + this.w ||
                 other.x + other.w < this.x - this.w ||
                 other.y - other.h > this.y + this.h ||
                 other.y + other.h < this.y - this.h);
    }

    function print(): Void {
        this.tl.print();
        printf(", ");
        this.tr.print();
        printf(", ");
        this.bl.print();
        printf(", ");
        this.br.print();
        printf("\n");
    }
}

struct Circle {
    var x: Float;
    var y: Float;
    var r: Float;
    var rSquared: Float;
    var center: Point;

    static function new(x: Float, y: Float, r: Float): Circle {
        var rSquared = r * r;
        return struct Self {
            x,
            y,
            r,
            rSquared,
            center: Point.new(x, y)
        };
    }

    function dist(other: Circle): Float {
        var dist = this.center.dist(other.center);
        return (dist - this.r) - other.r;
    }

    function contains(pt: Point): Bool {
        // check if the point is in the circle by checking if the euclidean distance of
        // the point and the center of the circle if smaller or equal to the radius of
        // the circle
        var d: Float = (pt.x - this.x) * (pt.x - this.x) + (pt.y - this.y) * (pt.y - this.y);
        return d <= this.rSquared;
    }

    function intersects(other: Rect): Bool {

        var xDist: Float = absF(other.x - this.x);
        var yDist: Float = absF(other.y - this.y);
        var r: Float = this.r;
        var w: Float = other.w;
        var h: Float = other.h;

        var edges: Float = (xDist - w) * (xDist - w) + (yDist - h) * (yDist - h);

        if (xDist > (r + w) || yDist > (r + h)) {
            return false;
        }

        // intersection within the circle
        if (xDist <= w || yDist <= h) {
            return true;
        }

        // intersection on the edge of the circle
        return edges <= this.rSquared;
    }


    function print(): Void {
        this.center.print();
        printf(", âŒ€%f\n", this.r);
    }
}


// struct Children {
//     var topright: QuadTree;
//     var topleft: QuadTree;
//     var bottomright: QuadTree;
//     var bottomleft: QuadTree;

//     static function new(topright: QuadTree, topleft: QuadTree, bottomright: QuadTree, bottomleft: QuadTree) {
//         return struct Self {
//             topright,
//             topleft,
//             bottomright,
//             bottomleft
//         };
//     }
// }


struct QuadTree {
    var boundary: Rect;
    var capacity: Int;
    var points: Array;
    var divided: Bool;
    var insertPoint: Int = 0;
    // var children: Children;
    var topright: Ptr[QuadTree];
    var topleft: Ptr[QuadTree];
    var bottomright: Ptr[QuadTree];
    var bottomleft: Ptr[QuadTree];
    var hasBeenInserted: Bool = false;

    static function new(boundary: Rect, capacity: Int) {
        if capacity < 1 {
            capacity = 1;
        }

        return struct Self {
            boundary,
            capacity,
            points: Array.new(capacity),
            divided: false,
            insertPoint: 0
        };
    }

    function subdivide() {
        var x = this.boundary.x;
        var y = this.boundary.y;
        var w = this.boundary.w / 2;
        var h = this.boundary.h / 2;

        var tr: Rect = Rect.new(x + w, y,     w, h);
        var tl: Rect = Rect.new(x,     y,     w, h);
        var br: Rect = Rect.new(x + w, y + h, w, h);
        var bl: Rect = Rect.new(x,     y + h, w, h);

        // printf("--\n");
        // tr.print();
        // tl.print();
        // br.print();
        // bl.print();
        // printf("--\n");

        // var topright: QuadTree = QuadTree.new(tr, this.capacity);
        // var topleft: QuadTree = QuadTree.new(tl, this.capacity);
        // var bottomright: QuadTree = QuadTree.new(br, this.capacity);
        // var bottomleft: QuadTree = QuadTree.new(bl, this.capacity);

        this.topright = malloc(sizeof QuadTree);
        this.topleft = malloc(sizeof QuadTree);
        this.bottomright = malloc(sizeof QuadTree);
        this.bottomleft = malloc(sizeof QuadTree);

        *this.topright = QuadTree.new(tr, this.capacity);
        *this.topleft = QuadTree.new(tl, this.capacity);
        *this.bottomright = QuadTree.new(br, this.capacity);
        *this.bottomleft = QuadTree.new(bl, this.capacity);

        // this.children = struct Children {
        //     topleft,
        //     topright,
        //     bottomright,
        //     bottomleft
        // };

        this.divided = true;
    }

    function insert(pt: Point) {
        // this.boundary.print();
        if (!this.boundary.contains(pt)) {  // <- in this function call
            // printf("not in\n");
            return false;
        } else {
            // printf("in\n");
            if (this.insertPoint < this.capacity) {
                // pt.print();
                this.points[this.insertPoint] = pt;
                // this.points[this.insertPoint].print();
                this.hasBeenInserted = true;
                // printf(if this.hasBeenInserted then "true\n" else "false\n");
                this.insertPoint++;
                // printf("inserted\n");
                return true;
            } else {
                // printf(if this.hasBeenInserted then "true\n" else "false\n");
                // printf(if this.divided then "true\n" else "false\n");
                if (this.divided == false && this.hasBeenInserted == true) {  // <- as a result of adding && this.hasBeenInserted
                    // if count > 30 {
                    //     exit(EXIT_FAILURE);
                    // }
                    // printf("dividing\n");
                    // this.boundary.print();
                    this.subdivide();
                    // printf("---\n");
                    // this.topright.boundary.print();
                    // this.topleft.boundary.print();
                    // this.bottomright.boundary.print();
                    // this.bottomleft.boundary.print();
                    // printf("----------\n");
                    // count++;
                }
                // printf("subinsert before if\n");
                if (this.topright.insert(pt) ||
                    this.topleft.insert(pt) ||
                    this.bottomright.insert(pt) ||
                    this.bottomleft.insert(pt)) {
                        // printf("subinsert\n");
                        return true;
                }
            }
        }
        return false;
    }

    function query(boundary: Rect) {
        if (!boundary.intersects(this.boundary)) {
            return Vector.new();
        }

        var found: Vector = Vector.new();

        for p in this.points {
            if (boundary.contains(p)) {
                found.push(p);
            }
        }

        if (this.divided) {
            var tl: Vector = this.topleft.query(boundary);
            if (tl.length != 0) {
                for m in 0 ... tl.length {
                    if tl[m].initialized {
                        found.push(tl[m]);
                        // tl[m].print(true, " tl\n");
                    }
                }
            }
            var tr: Vector = this.topright.query(boundary);
            if (tr.length != 0) {
                for m in 0 ... tr.length {
                    if tr[m].initialized {
                        found.push(tr[m]);
                        // tr[m].print(true, " tr\n");
                    }
                }
            }
            var bl: Vector = this.bottomleft.query(boundary);
            if (bl.length != 0) {
                for m in 0 ... bl.length {
                    if bl[m].initialized {
                        found.push(bl[m]);
                        // bl[m].print(true, " bl\n");
                    }
                }
            }
            var br: Vector = this.bottomright.query(boundary);
            if (br.length != 0) {
                for m in 0 ... br.length {
                    if br[m].initialized {
                        found.push(br[m]);
                        // br[m].print(true, " br\n");
                    }
                }
            }
        }
        return found;
    }

    // rules {
    //     ($this.topright) => $this.children.topright;
    //     ($this.topleft) => $this.children.topleft;
    //     ($this.bottomright) => $this.children.bottomright;
    //     ($this.bottomleft) => $this.children.bottomleft;
    // }

    function debugDivided(prefix: CString = "") {
        if this.divided {
            printf("%s", prefix);
            printf("true\n");
            var nextPrefix = strAdd("|..", prefix);
            this.topright.debugDivided(nextPrefix);
            this.topleft.debugDivided(nextPrefix);
            this.bottomright.debugDivided(nextPrefix);
            this.bottomleft.debugDivided(nextPrefix);
        } else {
            printf("%s", prefix);
            printf("false\n");
        }
    }

    function debugValues(prefix: CString = "") {
        if this.divided {
            for n in 0 ... this.capacity {
                printf("%s", prefix);
                this.points[n].print();
                printf("\n");
            }
            var nextPrefix = strAdd("|..", prefix);
            this.topright.debugValues(nextPrefix);
            printf("%s|\n", prefix);
            this.topleft.debugValues(nextPrefix);
            printf("%s|\n", prefix);
            this.bottomright.debugValues(nextPrefix);
            printf("%s|\n", prefix);
            this.bottomleft.debugValues(nextPrefix);
        } else {
            for n in 0 ... this.capacity {
                printf("%s", prefix);
                this.points[n].print();
                printf("\n");
            }
        }
    }
}


function main() {
    var canvas = Rect.new(0, 0, 20, 20);
    var qtree: QuadTree = QuadTree.new(canvas, 4);
    // qtree.boundary.print();
    for n in 0 ... 50 {
        qtree.insert(Point.new(randF(0, 20), randF(0, 20)));
    }
    // qtree.insert(Point.new(1, 1));
    // qtree.insert(Point.new(2, 14));
    // qtree.insert(Point.new(7, 5));
    // qtree.insert(Point.new(3, 2));
    // qtree.insert(Point.new(2, 3));
    // qtree.insert(Point.new(2, 5));
    // qtree.insert(Point.new(8, 13));
    // qtree.insert(Point.new(6, 1));
    qtree.debugValues();
    var select = Rect.new(0, 0, 5, 5);
    var selected: Vector = qtree.query(select);
    printf("\n");
    for m in 0 ... selected.length {
        selected[m].print(true, "\n");
    }
}
