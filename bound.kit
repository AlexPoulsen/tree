import kit.math;
include "string.h";
include "time.h";
include "stdlib.h";
include "stdio.h";
include "math.h";

import helperfunctions;
import point;
import rect;
import circle;
import line;


trait Bound {
    function dist(other: Box[Bound]): Float;
    function contains(pt: Point): Bool;
    function intersects(other: Box[Bound]): Bool;
    function print(): Void;
    function type(): CString;
    public function base(): Ptr[Void]{
        return &this;
    }
}

implement Bound for Rect {
    function contains(pt: Point): Bool {
        return (pt.x >= this.x - this.w &&
                pt.x <= this.x + this.w &&
                pt.y >= this.y - this.h &&
                pt.y <= this.y + this.h);
    }

    function dist(other: Box[Bound]): Float {
        if other.type() == "rect" {
            var otherRect = other.base() as Ptr[Rect];
            var angle_thisToOther = radian_PosNeg_To_0to2pi(atan2(this.center - otherRect.center));
            var angle_otherToThis = radian_PosNeg_To_0to2pi(atan2(otherRect.center - this.center));
            var dist_tl = this.tl.dist(otherRect.tl);
            var dist_tr = this.tr.dist(otherRect.tr);
            var dist_bl = this.bl.dist(otherRect.bl);
            var dist_br = this.br.dist(otherRect.br);
            return (dist_tl + dist_tr + dist_bl + dist_br) / 4;
        }
        if other.type() == "circle" {
            var otherCircle: Ptr[Circle] = other.base() as Ptr[Circle];
            var thisRect: Ptr[Rect] = this.base() as Ptr[Rect];
            var angle_thisToOther = radian_PosNeg_To_0to2pi(atan2(thisRect.center - otherCircle.center));
            // var angle_otherToThis = radian_PosNeg_To_0to2pi(atan2(otherCircle.center - thisRect.center));
            var dist = thisRect.center.dist(otherCircle.center);
            return (dist - otherCircle.r) - rectDist(angle_thisToOther, thisRect);
        }
        if other.type() == "line" {
            var o: Ptr[Line] = other.base() as Ptr[Line];
            var a: Float = min(distPointToLine(o, this.tl), distPointToLine(o, this.tr));
            var b: Float = min(distPointToLine(o, this.tr), distPointToLine(o, this.bl));
            var c: Float = min(distPointToLine(o, this.bl), distPointToLine(o, this.br));
            var d: Float = min(distPointToLine(o, this.br), distPointToLine(o, this.tl));
            return min(min(a, b), min(c, d));
        }
    }

    function intersects(other: Box[Bound]): Bool {
        if other.type() == "rect" {
            var otherRect: Ptr[Rect] = other.base() as Ptr[Rect];
            return !(otherRect.x - otherRect.w > this.x + this.w ||
                    otherRect.x + otherRect.w < this.x - this.w ||
                    otherRect.y - otherRect.h > this.y + this.h ||
                    otherRect.y + otherRect.h < this.y - this.h);
        }
        if other.type() == "circle" {
            return (other.base() as Ptr[Circle]).intersectsRect(this);
        }
        if other.type() == "line" {
            var o: Ptr[Line] = other.base() as Ptr[Line];
            return (lineIntersection(o, this.line_tl_tr) ||
                    lineIntersection(o, this.line_tr_bl) ||
                    lineIntersection(o, this.line_bl_br) ||
                    lineIntersection(o, this.line_br_tl));
        }
    }

    function print(): Void {
        this.tl.print();
        printf(", ");
        this.tr.print();
        printf(", ");
        this.bl.print();
        printf(", ");
        this.br.print();
        printf("\n");
    }

    function type() {
        return "rect";
    }
}

implement Bound for Circle {
    function contains(pt: Point): Bool {
        // check if the point is in the circle by checking if the euclidean distance of
        // the point and the center of the circle if smaller or equal to the radius of
        // the circle
        var d: Float = (pt.x - this.x) * (pt.x - this.x) + (pt.y - this.y) * (pt.y - this.y);
        return d <= this.rSquared;
    }

    function dist(other: Box[Bound]): Float {
        if other.type() == "rect" {
            var otherRect: Ptr[Rect] = other.base() as Ptr[Rect];
            var thisCircle: Ptr[Circle] = this.base() as Ptr[Circle];
            var angle_thisToOther = radian_PosNeg_To_0to2pi(atan2(thisCircle.center - otherRect.center));
            // var angle_otherToThis = radian_PosNeg_To_0to2pi(atan2(otherRect.center - thisCircle.center));
            var dist = thisCircle.center.dist(otherRect.center);
            return (dist - thisCircle.r) - rectDist(angle_thisToOther, otherRect);
        }
        if other.type() == "circle" {
            var otherCircle: Ptr[Circle] = other.base() as Ptr[Circle];
            var dist = this.center.dist(otherCircle.center);
            return (dist - this.r) - otherCircle.r;
        }
        if other.type() == "line" {
            var o: Ptr[Line] = other.base() as Ptr[Line];
            return distPointToLine(o, this.center);
        }
    }

    function intersects(other: Box[Bound]): Bool {
        if other.type() == "rect" {
            return this.intersectsRect(other.base() as Ptr[Rect]);
        }
        if other.type() == "circle" {
            return this.intersectsCircle(other.base() as Ptr[Circle]);
        }
        if other.type() == "line" {
            var o: Ptr[Line] = other.base() as Ptr[Line];
            return this.r <= distPointToLine(o, this.center);
        }
    }


    function print(): Void {
        this.center.print();
        printf(", âŒ€%f\n", this.r);
    }

    function type() {
        return "circle";
    }
}

implement Bound for Line {
    function contains(pt: Point): Bool {
        return distPointToLine(this, pt) < 0.00001;
    }

    function dist(other: Box[Bound]): Float {
        if other.type() == "rect" {
            var o: Ptr[Rect] = other.base() as Ptr[Rect];
            var a: Float = min(distPointToLine(this, o.tl), distPointToLine(this, o.tr));
            var b: Float = min(distPointToLine(this, o.tr), distPointToLine(this, o.bl));
            var c: Float = min(distPointToLine(this, o.bl), distPointToLine(this, o.br));
            var d: Float = min(distPointToLine(this, o.br), distPointToLine(this, o.tl));
            return min(min(a, b), min(c, d));
        }
        if other.type() == "circle" {
            var o: Ptr[Circle] = other.base() as Ptr[Circle];
            return distPointToLine(this, o.center);
        }
        if other.type() == "line" {
            var o: Ptr[Line] = other.base() as Ptr[Line];
            return min(distPointToLine(this, o.p1), distPointToLine(this, o.p2));
        }
    }

    function intersects(other: Box[Bound]): Bool {
        if other.type() == "rect" {
            var o: Ptr[Rect] = other.base() as Ptr[Rect];
            return (lineIntersection(this, o.line_tl_tr) ||
                    lineIntersection(this, o.line_tr_bl) ||
                    lineIntersection(this, o.line_bl_br) ||
                    lineIntersection(this, o.line_br_tl));
        }
        if other.type() == "circle" {
            var o: Ptr[Circle] = other.base() as Ptr[Circle];
            return o.r <= distPointToLine(this, o.center);
        }
        if other.type() == "line" {
            return lineIntersection(this, other.base() as Ptr[Line]);
        }
    }

    function print(): Void {
        this.p1.print();
        printf(", ");
        this.p2.print();
        printf(", ");
        printf("%f", this.length);
        printf("\n");
    }

    function type() {
        return "line";
    }
}
